definitions:
  api.Pagination:
    properties:
      all:
        type: boolean
      index:
        type: integer
      limit:
        type: integer
      totalItems:
        type: integer
      totalPages:
        type: integer
    type: object
  auth.AddUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      userId:
        type: string
    required:
    - email
    - name
    - password
    - userId
    type: object
  auth.ChangePasswordResponse:
    properties:
      lastLoginAt:
        type: integer
      token:
        type: string
    type: object
  auth.ChangePasswordResponseDTO:
    properties:
      correlationId:
        type: string
      data:
        $ref: '#/definitions/auth.ChangePasswordResponse'
      message:
        type: string
      status:
        type: string
    type: object
  auth.ChangeUserPasswordInput:
    properties:
      email:
        type: string
      newPassword:
        type: string
      password:
        type: string
    required:
    - email
    - newPassword
    - password
    type: object
  auth.LoginResponse:
    properties:
      changeUserPassword:
        type: boolean
      lastLoginAt:
        type: integer
      token:
        type: string
    type: object
  auth.LoginResponseDTO:
    properties:
      correlationId:
        type: string
      data:
        $ref: '#/definitions/auth.LoginResponse'
      message:
        type: string
      status:
        type: string
    type: object
  auth.LoginUserInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.SignupResponseDTO:
    properties:
      correlationId:
        type: string
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  handlers.APIStatus:
    properties:
      status:
        type: string
    type: object
  incident.AddConference:
    properties:
      type:
        type: string
    type: object
  incident.Attachment:
    properties:
      description:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  incident.Channel:
    properties:
      id:
        type: string
      name:
        type: string
      source:
        type: string
      status:
        type: string
      url:
        type: string
    type: object
  incident.Conference:
    properties:
      conferenceId:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  incident.CreateRequest:
    properties:
      addConference:
        $ref: '#/definitions/incident.AddConference'
      attachments:
        items:
          $ref: '#/definitions/incident.Attachment'
        type: array
      channels:
        items:
          $ref: '#/definitions/incident.Channel'
        type: array
      description:
        type: string
      environments:
        items:
          $ref: '#/definitions/incident.Environment'
        type: array
      functionalities:
        items:
          $ref: '#/definitions/incident.Functionality'
        type: array
      identifier:
        type: string
      incidentChannel:
        $ref: '#/definitions/incident.IncidentChannel'
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/incident.Role'
        type: array
      services:
        items:
          $ref: '#/definitions/incident.Service'
        type: array
      severity:
        type: string
      status:
        type: string
      summary:
        type: string
      tags:
        items:
          type: string
        type: array
      type:
        type: string
    required:
    - identifier
    - incidentChannel
    - name
    - severity
    - summary
    - type
    type: object
  incident.CreateResponse:
    properties:
      accountIdentifier:
        type: string
      active:
        type: boolean
      attachments:
        items:
          $ref: '#/definitions/incident.Attachment'
        type: array
      channels:
        items:
          $ref: '#/definitions/incident.Channel'
        type: array
      conferenceDetails:
        items:
          $ref: '#/definitions/incident.Conference'
        type: array
      correlationID:
        type: string
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/utils.UserDetails'
      description:
        type: string
      environments:
        items:
          $ref: '#/definitions/incident.Environment'
        type: array
      functionalities:
        items:
          $ref: '#/definitions/incident.Functionality'
        type: array
      id:
        type: string
      identifier:
        type: string
      incidentChannel:
        $ref: '#/definitions/incident.IncidentChannel'
      name:
        type: string
      orgIdentifier:
        type: string
      projectIdentifier:
        type: string
      removed:
        type: boolean
      removedAt:
        type: string
      roles:
        items:
          $ref: '#/definitions/incident.Role'
        type: array
      services:
        items:
          $ref: '#/definitions/incident.Service'
        type: array
      severity:
        type: string
      stages:
        items:
          $ref: '#/definitions/incident.Stage'
        type: array
      status:
        type: string
      summary:
        type: string
      tags:
        items:
          type: string
        type: array
      type:
        type: string
      updatedAt:
        type: string
      updatedBy:
        $ref: '#/definitions/utils.UserDetails'
    required:
    - active
    - id
    - identifier
    - name
    - severity
    - status
    - summary
    type: object
  incident.CreateResponseDTO:
    properties:
      correlationId:
        type: string
      data:
        $ref: '#/definitions/incident.CreateResponse'
      message:
        type: string
      status:
        type: string
    type: object
  incident.Environment:
    properties:
      environmentId:
        type: string
      environmentName:
        type: string
    type: object
  incident.Functionality:
    properties:
      functionalityId:
        type: string
      functionalityName:
        type: string
    type: object
  incident.Incident:
    properties:
      accountIdentifier:
        type: string
      active:
        type: boolean
      attachments:
        items:
          $ref: '#/definitions/incident.Attachment'
        type: array
      channels:
        items:
          $ref: '#/definitions/incident.Channel'
        type: array
      conferenceDetails:
        items:
          $ref: '#/definitions/incident.Conference'
        type: array
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/utils.UserDetails'
      description:
        type: string
      environments:
        items:
          $ref: '#/definitions/incident.Environment'
        type: array
      functionalities:
        items:
          $ref: '#/definitions/incident.Functionality'
        type: array
      id:
        type: string
      identifier:
        type: string
      incidentChannel:
        $ref: '#/definitions/incident.IncidentChannel'
      name:
        type: string
      orgIdentifier:
        type: string
      projectIdentifier:
        type: string
      removed:
        type: boolean
      removedAt:
        type: string
      roles:
        items:
          $ref: '#/definitions/incident.Role'
        type: array
      services:
        items:
          $ref: '#/definitions/incident.Service'
        type: array
      severity:
        type: string
      stages:
        items:
          $ref: '#/definitions/incident.Stage'
        type: array
      status:
        type: string
      summary:
        type: string
      tags:
        items:
          type: string
        type: array
      type:
        type: string
      updatedAt:
        type: string
      updatedBy:
        $ref: '#/definitions/utils.UserDetails'
    required:
    - active
    - id
    - identifier
    - name
    - severity
    - status
    - summary
    type: object
  incident.IncidentChannel:
    properties:
      slack:
        $ref: '#/definitions/incident.Slack'
      type:
        type: string
    type: object
  incident.ListResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/incident.Incident'
        type: array
      correlationID:
        type: string
      pagination:
        $ref: '#/definitions/api.Pagination'
    type: object
  incident.ListResponseDTO:
    properties:
      correlationId:
        type: string
      data:
        $ref: '#/definitions/incident.ListResponse'
      message:
        type: string
      status:
        type: string
    type: object
  incident.Role:
    properties:
      roleType:
        type: string
      userDetails:
        $ref: '#/definitions/utils.UserDetails'
    type: object
  incident.Service:
    properties:
      serviceId:
        type: string
      serviceName:
        type: string
    type: object
  incident.Slack:
    properties:
      channelDescription:
        type: string
      channelId:
        type: string
      channelName:
        type: string
      channelReference:
        type: string
      channelStatus:
        type: string
      teamDomain:
        type: string
      teamId:
        type: string
      teamName:
        type: string
    type: object
  incident.Stage:
    properties:
      createdAt:
        type: string
      duration:
        type: integer
      stageId:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userDetails:
        $ref: '#/definitions/utils.UserDetails'
    type: object
  utils.DefaultResponseDTO:
    properties:
      correlationId:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  utils.UserDetails:
    properties:
      email:
        type: string
      source:
        type: string
      userId:
        type: string
      userName:
        type: string
    type: object
  version.Metadata:
    properties:
      name:
        type: string
      version:
        type: string
    type: object
  version.Resource:
    properties:
      versionInfo:
        $ref: '#/definitions/version.VersionInfo'
    type: object
  version.Version:
    properties:
      metaData:
        $ref: '#/definitions/version.Metadata'
      resource:
        $ref: '#/definitions/version.Resource'
      responseMessages:
        items:
          type: string
        type: array
    type: object
  version.VersionInfo:
    properties:
      buildNo:
        type: string
      gitBranch:
        type: string
      gitCommit:
        type: string
      patch:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/changePassword:
    post:
      consumes:
      - application/json
      description: ChangePassword of RespondNow
      operationId: ChangePassword
      parameters:
      - description: ChangePassword of RespondNow
        in: body
        name: '"changePassword"'
        required: true
        schema:
          $ref: '#/definitions/auth.ChangeUserPasswordInput'
      - description: correlationId
        in: query
        name: correlationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.ChangePasswordResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      summary: ChangePassword of RespondNow
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to RespondNow
      operationId: Login
      parameters:
      - description: Login to RespondNow
        in: body
        name: '"login"'
        required: true
        schema:
          $ref: '#/definitions/auth.LoginUserInput'
      - description: correlationId
        in: query
        name: correlationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      summary: Login to RespondNow
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Signup to RespondNow
      operationId: SignUp
      parameters:
      - description: Signup to RespondNow
        in: body
        name: '"signup"'
        required: true
        schema:
          $ref: '#/definitions/auth.AddUserInput'
      - description: correlationId
        in: query
        name: correlationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SignupResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      summary: Signup to RespondNow
      tags:
      - Auth
  /incident/create:
    post:
      consumes:
      - application/json
      description: Create an incident
      operationId: CreateIncident
      parameters:
      - description: Create an incident
        in: body
        name: incident"
        required: true
        schema:
          $ref: '#/definitions/incident.CreateRequest'
      - description: accountIdentifier
        in: query
        name: accountIdentifier
        required: true
        type: string
      - description: orgIdentifier
        in: query
        name: orgIdentifier
        type: string
      - description: projectIdentifier
        in: query
        name: projectIdentifier
        type: string
      - description: correlationId
        in: query
        name: correlationId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/incident.CreateResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      security:
      - ApiKeyAuth: []
      summary: Create an incident
      tags:
      - Incident
  /incident/list:
    get:
      consumes:
      - application/json
      description: List incidents
      operationId: ListIncidents
      parameters:
      - description: accountIdentifier
        in: query
        name: accountIdentifier
        required: true
        type: string
      - description: orgIdentifier
        in: query
        name: orgIdentifier
        type: string
      - description: projectIdentifier
        in: query
        name: projectIdentifier
        type: string
      - description: active
        in: query
        name: active
        type: boolean
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: correlationId
        in: query
        name: correlationId
        type: string
      - description: all
        in: query
        name: all
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/incident.ListResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      summary: List incidents
      tags:
      - Incident Management
  /status:
    get:
      consumes:
      - application/json
      description: Status of RespondNow Server
      operationId: Status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.APIStatus'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      summary: Status of RespondNow Server
      tags:
      - Miscellaneous
  /version:
    get:
      consumes:
      - application/json
      description: Version of RespondNow Server
      operationId: Version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/version.Version'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.DefaultResponseDTO'
      summary: Version of RespondNow Server
      tags:
      - Miscellaneous
swagger: "2.0"
