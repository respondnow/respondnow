/* eslint-disable */
// This code is autogenerated using @harnessio/oats-cli.
// Please do not modify this code directly.
import { useQuery, UseQueryOptions } from '@tanstack/react-query';

import type { ListResponseDto } from '../schemas/ListResponseDto';
import { fetcher, FetcherOptions } from '@services/fetcher';

export interface ListIncidentsQueryQueryParams {
  accountIdentifier: string;
  orgIdentifier?: string;
  projectIdentifier?: string;
  type?: 'Availability' | 'Latency' | 'Other' | 'Security';
  severity?: 'SEV0' | 'SEV1' | 'SEV2';
  status?: 'Acknowledged' | 'Identified' | 'Investigating' | 'Mitigated' | 'Resolved' | 'Started';
  active?: boolean;
  incidentChannelType?: string;
  search?: string;
  /**
   * @format int32
   * @default 0
   */
  page?: number;
  /**
   * @format int32
   * @default 10
   */
  limit?: number;
  all?: boolean;
  correlationId?: string;
}

export type ListIncidentsOkResponse = ListResponseDto;

export type ListIncidentsErrorResponse = unknown;

export interface ListIncidentsProps extends Omit<FetcherOptions<ListIncidentsQueryQueryParams, unknown>, 'url'> {
  queryParams: ListIncidentsQueryQueryParams;
}

export function listIncidents(props: ListIncidentsProps): Promise<ListIncidentsOkResponse> {
  return fetcher<ListIncidentsOkResponse, ListIncidentsQueryQueryParams, unknown>({
    url: `/api/incident/list`,
    method: 'GET',
    ...props
  });
}

/**
 * List all incidents with optional filters
 */
export function useListIncidentsQuery(
  props: ListIncidentsProps,
  options?: Omit<UseQueryOptions<ListIncidentsOkResponse, ListIncidentsErrorResponse>, 'queryKey' | 'queryFn'>
) {
  return useQuery<ListIncidentsOkResponse, ListIncidentsErrorResponse>(
    ['listIncidents', props.queryParams],
    ({ signal }) => listIncidents({ ...props, signal }),
    options
  );
}
