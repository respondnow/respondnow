run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 3m

# This file contains only configs which differ from defaults.
# All possible options can be found here https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml
linters-settings:
  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    line-length: 200

  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 30
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 15.0

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

  exhaustive:
    # Program elements to check for exhaustiveness.
    # Default: [ switch ]
    check:
    - switch
    - map

  exhaustruct:
    # List of regular expressions to exclude struct packages and names from check.
    # Default: []
    exclude:
    # std libs
    - "^net/http.Client$"
    - "^net/http.Cookie$"
    - "^net/http.Request$"
    - "^net/http.Response$"
    - "^net/http.Server$"
    - "^net/http.Transport$"
    - "^net/url.URL$"
    - "^os/exec.Cmd$"
    - "^reflect.StructField$"
    # public libs
    - "^github.com/prometheus/client_golang/.+Opts$"

  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    # TODO - Reduce
    lines: 1000
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 50
    # Ignore comments when counting lines.
    # Default false
    ignore-comments: true

  gocognit:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 50

  gocritic:
    # Settings passed to gocritic.
    # The settings key is the name of a supported gocritic checker.
    # The list of supported checkers can be find in https://go-critic.github.io/overview.
    settings:
      captLocal:
        # Whether to restrict checker to params only.
        # Default: true
        paramsOnly: false
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver.
        # Default: true
        skipRecvDeref: false

  gomnd:
    # List of function patterns to exclude from analysis.
    # Values always ignored: `time.Date`,
    # `strconv.FormatInt`, `strconv.FormatUint`, `strconv.FormatFloat`,
    # `strconv.ParseInt`, `strconv.ParseUint`, `strconv.ParseFloat`.
    # Default: []
    ignored-functions:
      - flag.Arg
      - flag.Duration.*
      - flag.Float.*
      - flag.Int.*
      - flag.Uint.*
      - os.Chmod
      - os.Mkdir.*
      - os.OpenFile
      - os.WriteFile
      - prometheus.ExponentialBuckets.*
      - prometheus.LinearBuckets

  govet:
    # Enable all analyzers.
    # Default: false
    enable-all: true
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    disable:
      - fieldalignment # too strict
    # Settings per analyzer.
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 0

  nolintlint:
    # Exclude following linters from requiring an explanation.
    # Default: []
    allow-no-explanation: [ funlen, gocognit, lll ]
    # Enable to require an explanation of nonzero length after each nolint directive.
    # Default: false
    require-explanation: true
    # Enable to require nolint directives to mention the specific linter being suppressed.
    # Default: false
    require-specific: true

  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx

  tenv:
    # The option `all` will run against whole test files (`_test.go`) regardless of method/function signatures.
    # Otherwise, only methods that take `*testing.T`, `*testing.B`, and `testing.TB` as arguments are checked.
    # Default: false
    all: true

linters:
  disable-all: true
  enable:
  ## enabled by default
  - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
  - gosimple # specializes in simplifying a code
  - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
  - ineffassign # detects when assignments to existing variables are not used
  - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
  - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
  - unused # checks for unused constants, variables, functions and types
    ## disabled by default
  - bodyclose # checks whether HTTP response body is closed successfully
  - cyclop # checks function and package cyclomatic complexity
  - dupl # tool for code clone detection
  - durationcheck # checks for two durations multiplied together
  - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
  - exhaustive # checks exhaustiveness of enum switch statements
  - exportloopref # checks for pointers to enclosing loop variables
  - forbidigo # forbids identifiers
  - funlen # tool for detection of long functions
  - gocheckcompilerdirectives # validates go compiler directive comments (//go:)
  - gochecknoglobals # checks that no global variables exist
  - gochecknoinits # checks that no init functions are present in Go code
  - gocognit # computes and checks the cognitive complexity of functions
  - goconst # finds repeated strings that could be replaced by a constant
  - gocritic # provides diagnostics that check for bugs, performance and style issues
  - gocyclo # computes and checks the cyclomatic complexity of functions
  - goimports # in addition to fixing imports, goimports also formats your code in the same style as gofmt
  - gomnd # detects magic numbers
  - gosec # inspects source code for security problems
  - lll # reports long lines
  - makezero # finds slice declarations with non-zero initial length
  #- mirror # reports wrong mirror patterns of bytes/strings usage
  - musttag # enforces field tags in (un)marshaled structs
  - nakedret # finds naked returns in functions greater than a specified function length
  - nestif # reports deeply nested if statements
  - nilerr # finds the code that returns nil even if it checks that the error is not nil
  - noctx # finds sending http request without context.Context
  - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
  #- perfsprint # checks that fmt.Sprintf can be replaced with a faster alternative
  - predeclared # finds code that shadows one of Go's predeclared identifiers
  #- protogetter # reports direct reads from proto message fields when getters should be used
  - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
  #- testifylint # checks usage of github.com/stretchr/testify
  - testpackage # makes you use a separate _test package
  - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
  - unconvert # removes unnecessary type conversions
  - unparam # reports unused function parameters
  - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
  - wastedassign # finds wasted assignment statements

  ## you may want to enable
  #- decorder # checks declaration order and count of types, constants, variables and functions
  #- exhaustruct # [highly recommend to enable] checks if all structure fields are initialized
  #- gci # controls golang package import order and makes it always deterministic
  #- ginkgolinter # [if you use ginkgo/gomega] enforces standards of using ginkgo and gomega
  #- godox # detects FIXME, TODO and other comment keywords
  #- goheader # checks is file header matches to pattern
  #- inamedparam # [great idea, but too strict, need to ignore a lot of cases by default] reports interfaces with unnamed method parameters
  #- interfacebloat # checks the number of methods inside an interface
  #- ireturn # accept interfaces, return concrete types
  #- prealloc # [premature optimization, but can be used in some cases] finds slice declarations that could potentially be preallocated
  #- tagalign # checks that struct tags are well aligned
  #- varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope
  #- wrapcheck # checks that errors returned from external packages are wrapped
  #- zerologlint # detects the wrong usage of zerolog that a user forgets to dispatch zerolog.Event
  # - asasalint # checks for pass []any as any in variadic func(...any)
  # - asciicheck # checks that your code does not contain non-ASCII identifiers
  # - bidichk # checks for dangerous unicode character sequences
  # - gomodguard # allow and block lists linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
  # - goprintffuncname # checks that printf-like functions are named with f at the end
  # - nilnil # checks that there is no simultaneous return of nil error and an invalid value
  # - promlinter # checks Prometheus metrics naming via promlint
issues:
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 50
  new-from-rev: HEAD

  exclude-rules:
  - text: 'shadow: declaration of "(err|ctx|ok)" shadows declaration at'
    linters: [ govet ]
  - source: "(noinspection|TODO)"
    linters: [ godot ]
  - source: "//noinspection"
    linters: [ gocritic ]
  - path: "_test\\.go"
    linters:
    - bodyclose
    - dupl
    - funlen
    - goconst
    - gosec
    - noctx
    - wrapcheck
